package cmanager.gui.components;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.JTextField;

/**
 * A JTextField with hinting support.
 *
 * <p>If there is no focus on the text field and while the user did not enter any text, a
 * configurable hint will be displayed instead of an empty text field.
 */
public class HintedTextField extends JTextField implements FocusListener {

    /** The actual hint text. */
    private final String hint;

    /** Whether the hint is shown at the moment. */
    private boolean hintShown;

    /**
     * Create the text field.
     *
     * @param hint The hint to display.
     */
    public HintedTextField(final String hint) {
        super(hint);
        this.hint = hint;
        this.hintShown = true;
        super.addFocusListener(this);
    }

    /**
     * Hide the hint if the field gains focus.
     *
     * @param focusEvent The corresponding focus event.
     */
    @Override
    public void focusGained(final FocusEvent focusEvent) {
        if (isEmpty()) {
            super.setText("");
            hintShown = false;
        }
    }

    /**
     * Show the hint if the field lost focus and no text has been entered.
     *
     * @param focusEvent The corresponding focus event.
     */
    @Override
    public void focusLost(final FocusEvent focusEvent) {
        if (isEmpty()) {
            super.setText(hint);
            hintShown = true;
        }
    }

    /**
     * Render the text field itself.
     *
     * <p>This will show the hint in gray if no text has been entered by the user. If the user has
     * entered something, the corresponding text will be shown in the default color.
     *
     * @param graphics The context to paint to.
     */
    @Override
    public void paint(final Graphics graphics) {
        // Call the regular paint routine.
        super.paint(graphics);

        // Overwrite the default rendering if the user has entered no text.
        if (isEmpty()) {
            // Render text "with some form of antialiasing".
            ((Graphics2D) graphics)
                    .setRenderingHint(
                            RenderingHints.KEY_TEXT_ANTIALIASING,
                            RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

            // Retrieve some dimension values required for our calculations.
            final int height = getHeight();
            final Insets insets = getInsets();
            final FontMetrics fontMetrics = graphics.getFontMetrics();

            // Retrieve/set the colors for our calculation.
            final int backgroundColor = getBackground().getRGB();
            final int foregroundColor = getForeground().getRGB();
            final int mixColor = 0xFEFEFEFE;

            // Determine the text color to draw the hint with.
            // This will blend the requested color with the foreground and the background color.
            final int drawColor =
                    ((backgroundColor & mixColor) >>> 1) + ((foregroundColor & mixColor) >>> 1);

            // Set the color and display the hint.
            graphics.setColor(new Color(drawColor, true));
            graphics.drawString(
                    hint, insets.left, height - fontMetrics.getDescent() - insets.bottom);
        }
    }

    /**
     * Utility function to check if the user has entered some content into the text field or if it
     * is empty.
     *
     * @return Whether the text field has no user-generated content, id est whether the text field
     *     just contains content generated by the application.
     */
    private boolean isEmpty() {
        return getText().isEmpty();
    }

    /**
     * Get the actual entered text.
     *
     * <p>We override this to not return the hint if no text has been entered by the user.
     *
     * @return The text entered by the user.
     */
    @Override
    public String getText() {
        if (hintShown) {
            return "";
        }

        return super.getText();
    }
}
